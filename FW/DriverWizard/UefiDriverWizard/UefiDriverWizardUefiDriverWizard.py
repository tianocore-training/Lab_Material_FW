## @file
# Subclass of UefiDriverWizard, which is generated by wxFormBuilder.
#
# Copyright (c) 2012 - 2014, Intel Corporation. All rights reserved.<BR>
#
# This program and the accompanying materials are licensed and made available
# under the terms and conditions of the BSD License which accompanies this
# distribution. The full text of the license may be found at
# http://opensource.org/licenses/bsd-license.php
#
# THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
# WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
#
##

"""Subclass of UefiDriverWizard, which is generated by wxFormBuilder."""

##
# Import Modules
#
import Config
import wx
import os
import sys
import uuid
import string
import TemplateString
import UefiDriverWizard
import UefiDriverWizardNewPackage
import UefiDriverWizardNewUefiDriver
import UefiDriverWizardNewProtocol
import UefiDriverWizardNewGuid
import UefiDriverWizardNewLibraryClass
import UefiDriverWizardUefiDriverWizard
import UefiDriverWizardUefiDriverModelOptionalFeatures
import UefiDriverWizardUefiDriverModelConsumedProtocols
import UefiDriverWizardUefiDriverModelProducedProtocols

# Implementing UefiDriverWizard
class UefiDriverWizardUefiDriverWizard( UefiDriverWizard.UefiDriverWizard ):
  def __init__( self, parent ):
    UefiDriverWizard.UefiDriverWizard.__init__( self, parent )
    self.newUefiDriver.Enable(False)
    self.newProtocol.Enable(False)
    self.newPackage.Enable(False)
    self.newGuid.Enable(False)
    self.newLibraryClass.Enable(False)

  def WorkspaceValid(self):
    if Config.WorkspacePath == '':
      Message = 'WORKSPACE not selected'
    elif not os.path.isdir(Config.WorkspacePath):
      Message = 'WORKSPACE %s is not a directory' % (Config.WorkspacePath)
    elif not os.path.exists (os.path.join(Config.WorkspacePath, 'Conf', 'target.txt')):
      Message = 'WORKSPACE %s is invalid' % (Config.WorkspacePath)
    elif not os.path.isfile (os.path.join(Config.WorkspacePath, 'Conf', 'target.txt')):
      Message = 'WORKSPACE %s is invalid' % (Config.WorkspacePath)
    else:
      return True
    dlg = wx.MessageDialog(self, Message, 'ERROR', wx.OK | wx.ICON_ERROR)
    dlg.ShowModal()
    dlg.Destroy()
    return False

  # Handlers for UefiDriverWizard events.
  def openWorkspaceOnMenuSelection( self, event ):
    dlg = wx.DirDialog(self, u"EDK II WORKSPACE Path", Config.WorkspacePath, wx.DD_DIR_MUST_EXIST)
    while dlg.ShowModal() == wx.ID_OK:
      Config.WorkspacePath = dlg.GetPath()
      if self.WorkspaceValid():
        Config.App.TopWindow.SetTitle ("%s - UEFI Driver Wizard" % (Config.WorkspacePath))
        dlg.Destroy()
        self.LogMessageWindow.AppendText('\nWORKSPACE %s selected\n' % (Config.WorkspacePath))
        self.newUefiDriver.Enable(True)
        self.newProtocol.Enable(True)
        self.newPackage.Enable(True)
        self.newGuid.Enable(True)
        self.newLibraryClass.Enable(True)
    
        return
      Config.WorkspacePath = ''
      Config.App.TopWindow.SetTitle ("UEFI Driver Wizard")
      self.newUefiDriver.Enable(False)
      self.newProtocol.Enable(False)
      self.newPackage.Enable(False)
      self.newGuid.Enable(False)
      self.newLibraryClass.Enable(False)
    Config.WorkspacePath = ''
    dlg.Destroy()

  def newUefiDriverOnMenuSelection( self, event ):
    if not self.WorkspaceValid():
      return
    frame = UefiDriverWizardNewUefiDriver.UefiDriverWizardNewUefiDriver (None)
    frame.Show()

  def newPackageOnMenuSelection( self, event ):
    if not self.WorkspaceValid():
      return
    frame = UefiDriverWizardNewPackage.UefiDriverWizardNewPackage (None)
    frame.Show()

  def newProtocolOnMenuSelection( self, event ):
    if not self.WorkspaceValid():
      return
    frame = UefiDriverWizardNewProtocol.UefiDriverWizardNewProtocol (None)
    frame.Show()

  def newGuidOnMenuSelection( self, event ):
    if not self.WorkspaceValid():
      return
    frame = UefiDriverWizardNewGuid.UefiDriverWizardNewGuid (None)
    frame.Show()

  def newLibraryClassOnMenuSelection( self, event ):
    if not self.WorkspaceValid():
      return
    frame = UefiDriverWizardNewLibraryClass.UefiDriverWizardNewLibraryClass (None)
    frame.Show()

  def exitOnMenuSelection( self, event ):
    sys.exit()

  def aboutOnMenuSelection( self, event ):
    info = wx.AboutDialogInfo()
    info.Name = "UEFI Driver Wizard"
    info.Version = "0.11"
    info.Copyright = "Copyright (C) 2012-2014 Intel Corporation. All rights reserved"
    info.Icon = wx.Icon(os.path.join(os.path.abspath(sys.path[0]), 'Logo.png'), wx.BITMAP_TYPE_PNG)
    info.Description = '''
This wizard is designed to aid in the development of UEFI Drivers
using the EDK II open source project as a development environment.
The EDK II provides a cross-platform firmware development
environment for UEFI.  UEFI Drivers are described in the Unified
Extensible Firmware Interface Specification, Version 2.3.1.  There
are different categories of UEFI Drivers, and many variations of
each category.  This wizard provides basic support for the most
common categories of UEFI drivers.  Many other driver designs are
possible.  In addition, this wizard provides a templates for the
various driver-related UEFI Protocols including Consoles, Serial
Ports, Graphics, Mass Storage, Network Interfaces, and User
Credentials.
'''
    info.WebSite = ("http://www.tianocore.org", "EDK II home page")
    wx.AboutBox(info)

  def licenseOnMenuSelection( self, event ):
    info = wx.AboutDialogInfo()
    info.Name = "UEFI Driver Wizard"
    info.Version = "0.11"
    info.Copyright = "Copyright (C) 2012 Intel Corporation. All rights reserved"
    info.Icon = wx.Icon(os.path.join(os.path.abspath(sys.path[0]), 'Logo.png'), wx.BITMAP_TYPE_PNG)
    info.Description = '''
This program and the accompanying materials are licensed and
made available under the terms and conditions of the BSD License
which accompanies this distribution.  The full text of the license
may be found at http://opensource.org/licenses/bsd-license.php

THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN
"AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, EITHER EXPRESS OR IMPLIED.
'''
    info.WebSite = ("http://opensource.org/licenses/bsd-license.php", "BDS License")
    wx.AboutBox(info)
