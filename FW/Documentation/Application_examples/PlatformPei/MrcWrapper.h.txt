//
// This file contains an 'Intel Pre-EFI Module' and is licensed
// for Intel CPUs and Chipsets under the terms of your license 
// agreement with Intel or your vendor.  This file may be      
// modified by the user, subject to additional terms of the    
// license agreement                                           
//
/*++

Copyright (c)  2006 - 2010 Intel Corporation. All rights reserved
This software and associated documentation (if any) is furnished
under a license and may only be used or copied in accordance
with the terms of the license. Except as permitted by such
license, no part of this software or documentation may be
reproduced, stored in a retrieval system, or transmitted in any
form or by any means without the express written consent of
Intel Corporation.


Module Name:

    MemoryWrapper.h
    
Abstract:

    Framework PEIM to initialize memory on an DDR2 SDRAM Memory Controller.

--*/

#ifndef _PEI_MRC_WRAPPER_H
#define _PEI_MRC_WRAPPER_H

#include "Platform.h"

//
// Maximum number of bytes supported by the memory controller
//
#define MAX_MEMORY             0x100000000ULL

//
// Maximum number of SDRAM channels supported by the memory controller
//
#define MAX_CHANNELS           2

//
// Maximum number of DIMM sockets supported by the memory controller
//
#define MAX_SOCKETS            4

//
// Maximum number of sides supported per DIMM
//
#define   MAX_SIDES            2

//
// Maximum number of "Socket Sets", where a "Socket Set is a set of matching
// DIMM's from the various channels
//
#define   MAX_SOCKET_SETS      2

//
// Maximum number of rows supported by the memory controller
//
#define MAX_ROWS (MAX_SIDES * MAX_SOCKETS)

//
// Maximum number of memory ranges supported by the memory controller
//
#define MAX_RANGES (MAX_ROWS + 5)

//
// SMRAM range definitions
//
#define MC_ABSEG_HSEG_PHYSICAL_START        0x000A0000
#define MC_ABSEG_HSEG_LENGTH                0x00020000
#define MC_ABSEG_CPU_START                  0x000A0000
#define MC_HSEG_CPU_START                   0xFEDA0000

//
// Min. of 48MB PEI phase
//
#define  PEI_MIN_MEMORY_SIZE               (6 * 0x800000)
#define  PEI_RECOVERY_MIN_MEMORY_SIZE      (6 * 0x800000)

#define PEI_MEMORY_RANGE_OPTION_ROM UINT32
#define PEI_MR_OPTION_ROM_ALL       0xFFFFFFFF
#define PEI_MR_OPTION_ROM_NONE      0x00000000
#define PEI_MR_OPTION_ROM_C0000_16K 0x00000001
#define PEI_MR_OPTION_ROM_C4000_16K 0x00000002
#define PEI_MR_OPTION_ROM_C8000_16K 0x00000004
#define PEI_MR_OPTION_ROM_CC000_16K 0x00000008
#define PEI_MR_OPTION_ROM_D0000_16K 0x00000010
#define PEI_MR_OPTION_ROM_D4000_16K 0x00000020
#define PEI_MR_OPTION_ROM_D8000_16K 0x00000040
#define PEI_MR_OPTION_ROM_DC000_16K 0x00000080
#define PEI_MR_OPTION_ROM_E0000_16K 0x00000100
#define PEI_MR_OPTION_ROM_E4000_16K 0x00000200
#define PEI_MR_OPTION_ROM_E8000_16K 0x00000400
#define PEI_MR_OPTION_ROM_EC000_16K 0x00000800
#define PEI_MR_OPTION_ROM_F0000_16K 0x00001000
#define PEI_MR_OPTION_ROM_F4000_16K 0x00002000
#define PEI_MR_OPTION_ROM_F8000_16K 0x00004000
#define PEI_MR_OPTION_ROM_FC000_16K 0x00008000

//
// SMRAM Memory Range
//
#define PEI_MEMORY_RANGE_SMRAM      UINT32
#define PEI_MR_SMRAM_ALL            0xFFFFFFFF
#define PEI_MR_SMRAM_NONE           0x00000000
#define PEI_MR_SMRAM_CACHEABLE_MASK 0x80000000
#define PEI_MR_SMRAM_SEGTYPE_MASK   0x00FF0000
#define PEI_MR_SMRAM_ABSEG_MASK     0x00010000
#define PEI_MR_SMRAM_HSEG_MASK      0x00020000
#define PEI_MR_SMRAM_TSEG_MASK      0x00040000
//
// If adding additional entries, SMRAM Size
// is a multiple of 128KB.
//
#define PEI_MR_SMRAM_SIZE_MASK          0x0000FFFF
#define PEI_MR_SMRAM_SIZE_128K_MASK     0x00000001
#define PEI_MR_SMRAM_SIZE_256K_MASK     0x00000002
#define PEI_MR_SMRAM_SIZE_512K_MASK     0x00000004
#define PEI_MR_SMRAM_SIZE_1024K_MASK    0x00000008
#define PEI_MR_SMRAM_SIZE_2048K_MASK    0x00000010
#define PEI_MR_SMRAM_SIZE_4096K_MASK    0x00000020
#define PEI_MR_SMRAM_SIZE_8192K_MASK    0x00000040

#define PEI_MR_SMRAM_ABSEG_128K_NOCACHE 0x00010001
#define PEI_MR_SMRAM_HSEG_128K_CACHE    0x80020001
#define PEI_MR_SMRAM_HSEG_128K_NOCACHE  0x00020001
#define PEI_MR_SMRAM_TSEG_128K_CACHE    0x80040001
#define PEI_MR_SMRAM_TSEG_128K_NOCACHE  0x00040001
#define PEI_MR_SMRAM_TSEG_256K_CACHE    0x80040002
#define PEI_MR_SMRAM_TSEG_256K_NOCACHE  0x00040002
#define PEI_MR_SMRAM_TSEG_512K_CACHE    0x80040004
#define PEI_MR_SMRAM_TSEG_512K_NOCACHE  0x00040004
#define PEI_MR_SMRAM_TSEG_1024K_CACHE   0x80040008
#define PEI_MR_SMRAM_TSEG_1024K_NOCACHE 0x00040008
#define PEI_MR_SMRAM_TSEG_8192K_CACHE   0x80040040
#define PEI_MR_SMRAM_TSEG_8192K_NOCACHE 0x00040040

//
// Graphics Memory Range
//
#define PEI_MEMORY_RANGE_GRAPHICS_MEMORY  UINT32
#define PEI_MR_GRAPHICS_MEMORY_ALL        0xFFFFFFFF
#define PEI_MR_GRAPHICS_MEMORY_NONE       0x00000000
#define PEI_MR_GRAPHICS_MEMORY_CACHEABLE  0x80000000

//
// If adding additional entries, Graphics Memory Size
// is a multiple of 512KB.
//
#define PEI_MR_GRAPHICS_MEMORY_SIZE_MASK    0x0000FFFF
#define PEI_MR_GRAPHICS_MEMORY_512K_NOCACHE 0x00000001
#define PEI_MR_GRAPHICS_MEMORY_512K_CACHE   0x80000001
#define PEI_MR_GRAPHICS_MEMORY_1M_NOCACHE   0x00000002
#define PEI_MR_GRAPHICS_MEMORY_1M_CACHE     0x80000002
#define PEI_MR_GRAPHICS_MEMORY_4M_NOCACHE   0x00000008
#define PEI_MR_GRAPHICS_MEMORY_4M_CACHE     0x80000008
#define PEI_MR_GRAPHICS_MEMORY_8M_NOCACHE   0x00000010
#define PEI_MR_GRAPHICS_MEMORY_8M_CACHE     0x80000010
#define PEI_MR_GRAPHICS_MEMORY_16M_NOCACHE  0x00000020
#define PEI_MR_GRAPHICS_MEMORY_16M_CACHE    0x80000020
#define PEI_MR_GRAPHICS_MEMORY_32M_NOCACHE  0x00000040
#define PEI_MR_GRAPHICS_MEMORY_32M_CACHE    0x80000040
#define PEI_MR_GRAPHICS_MEMORY_48M_NOCACHE  0x00000060
#define PEI_MR_GRAPHICS_MEMORY_48M_CACHE    0x80000060
#define PEI_MR_GRAPHICS_MEMORY_64M_NOCACHE  0x00000080
#define PEI_MR_GRAPHICS_MEMORY_64M_CACHE    0x80000080
//
// Pci Memory Hole
//
#define PEI_MEMORY_RANGE_PCI_MEMORY       UINT32
#define PEI_MR_PCI_MEMORY_SIZE_512M_MASK  0x00000001

//
// Defined ECC types
//
#define PEI_DUAL_CHANNEL_DDR_ECC_TYPE_NONE             0x01   // No error checking
#define PEI_DUAL_CHANNEL_DDR_ECC_TYPE_EC               0x02   // Error checking only
#define PEI_DUAL_CHANNEL_DDR_ECC_TYPE_SECC             0x04   // Software Scrubbing ECC
#define PEI_DUAL_CHANNEL_DDR_ECC_TYPE_HECC             0x08   // Hardware Scrubbing ECC
#define PEI_DUAL_CHANNEL_DDR_ECC_TYPE_CKECC            0x10   // Chip Kill ECC

#define PEI_DUAL_CHANNEL_DDR_DATA_TYPE_REGISTERED    0x01
#define PEI_DUAL_CHANNEL_DDR_DATA_TYPE_UNREGISTERED  0x02
#define PEI_DUAL_CHANNEL_DDR_DATA_TYPE_BUFFERED      0x04
#define PEI_DUAL_CHANNEL_DDR_DATA_TYPE_UNBUFFERED    0x08
#define PEI_DUAL_CHANNEL_DDR_DATA_TYPE_SDR           0x10
#define PEI_DUAL_CHANNEL_DDR_DATA_TYPE_DDR           0x20

//
// Burst Length definitions
//
#define PEI_DUAL_CHANNEL_DDR_ROW_DATA_BL_01            0x01
#define PEI_DUAL_CHANNEL_DDR_ROW_DATA_BL_02            0x02
#define PEI_DUAL_CHANNEL_DDR_ROW_DATA_BL_04            0x04
#define PEI_DUAL_CHANNEL_DDR_ROW_DATA_BL_08            0x08

EFI_STATUS
InstallEfiMemory (
  IN      EFI_PEI_SERVICES                           **PeiServices,
  IN      EFI_BOOT_MODE                              BootMode,
  IN      UINT8                                      DimmSockets,
  IN      PEI_DUAL_CHANNEL_DDR_TIMING_DATA           *TimingData,
  IN      PEI_DUAL_CHANNEL_DDR_ROW_CONFIG            *RowConfArray,
  IN      EFI_PEI_READ_ONLY_VARIABLE2_PPI            *VariableServices
  );

EFI_STATUS
InstallS3Memory (
  IN      EFI_PEI_SERVICES                  **PeiServices,
  IN      EFI_PEI_READ_ONLY_VARIABLE2_PPI   *VariableServices
  );

VOID
LogMemoryEvent (
  IN      EFI_STATUS_CODE_VALUE             Event,
  IN      EFI_STATUS_CODE_TYPE              Severity,
  IN      UINT8                             EventData,
  IN OUT  PEI_MEMORY_LOG                    *MemoryLog
  );

EFI_STATUS
MemoryInit (
  IN EFI_PEI_SERVICES                       **PeiServices
  );

VOID
ReportEvents (
  IN      EFI_PEI_SERVICES                  **PeiServices,
  IN      PEI_MEMORY_LOG                    *MemoryLog
  );

EFI_STATUS
LoadConfig (
  IN      EFI_PEI_SERVICES                        **PeiServices,
  IN      EFI_PEI_READ_ONLY_VARIABLE2_PPI         *VariableServices,
  IN OUT  UINT8                                   *DimmSockets,
  IN OUT  PEI_DUAL_CHANNEL_DDR_TIMING_DATA        *TimingData,
  IN OUT  PEI_DUAL_CHANNEL_DDR_ROW_CONFIG         *RowConfArray
  );

EFI_STATUS
SaveConfig (
  IN      PEI_DUAL_CHANNEL_DDR_ROW_INFO     *RowInfo,
  IN      PEI_DUAL_CHANNEL_DDR_TIMING_DATA  *TimingData,
  IN      PEI_DUAL_CHANNEL_DDR_ROW_CONFIG   *RowConfArray,
  IN      MEMINIT_SPD_DATA                  *SpdData
  );

VOID
RetriveRequiredMemorySize (
  IN      EFI_PEI_SERVICES                  **PeiServices,
  OUT     UINTN                             *Size
  );

EFI_STATUS
GetRowInfo(
  OUT PEI_DUAL_CHANNEL_DDR_ROW_INFO                       **RowInfo
  );

EFI_STATUS
GetMemoryMap (
  IN     EFI_PEI_SERVICES                                 **PeiServices,
  IN     PEI_DUAL_CHANNEL_DDR_TIMING_DATA                 *TimingData,
  IN OUT PEI_DUAL_CHANNEL_DDR_ROW_CONFIG                  *RowConfArray,
  IN OUT PEI_DUAL_CHANNEL_DDR_MEMORY_MAP_RANGE            *MemoryMap,
  IN OUT UINT8                                            *NumRanges
  );  

EFI_STATUS
GetSpdData (
  IN OUT  MEMINIT_SPD_DATA                                *SpdData
  );

EFI_STATUS
ReadDimmSpd(
  IN      UINT8                                           Dimm,
  IN      UINT8                                           Offset,
  IN      UINTN                                           Count,
  IN OUT  UINT8                                           *Buffer
  );                                               

EFI_STATUS
ChooseRanges (
  IN OUT   PEI_MEMORY_RANGE_OPTION_ROM      *OptionRomMask,
  IN OUT   PEI_MEMORY_RANGE_SMRAM           *SmramMask,
  IN OUT   PEI_MEMORY_RANGE_GRAPHICS_MEMORY *GraphicsMemoryMask,
  IN OUT   PEI_MEMORY_RANGE_PCI_MEMORY      *PciMemoryMask
  );
  
EFI_STATUS
GetPlatformMemorySize (
  IN      EFI_PEI_SERVICES                       **PeiServices,
  IN      EFI_BOOT_MODE                          BootMode,
  IN OUT  UINT64                                 *MemorySize
  );

#endif
