/*++
  This file contains an 'Intel Pre-EFI Module' and is licensed  
  for Intel CPUs and Chipsets under the terms of your license   
  agreement with Intel or your vendor.  This file may be        
  modified by the user, subject to additional terms of the      
  license agreement                                             
--*/
/** @file
  This file provide the function to detect boot mode
  
Copyright (c) 1999 - 2008 Intel Corporation.<BR>
All rights reserved.  This software and associated documentation
(if any) is furnished under a license and may only be used or
copied in accordance with the terms of the license.  Except as
permitted by such license, no part of this software or
documentation may be reproduced, stored in a retrieval system, or transmitted 
in any form or by any means without the express written consent of Intel Corporation.

**/


#include "CommonHeader.h"

EFI_PEI_PPI_DESCRIPTOR mPpiListRecoveryBootMode = {
  (EFI_PEI_PPI_DESCRIPTOR_PPI | EFI_PEI_PPI_DESCRIPTOR_TERMINATE_LIST),
  &gEfiPeiBootInRecoveryModePpiGuid,
  NULL
};

EFI_PEI_PPI_DESCRIPTOR mPpiListSStateBootMode = {
  (EFI_PEI_PPI_DESCRIPTOR_PPI | EFI_PEI_PPI_DESCRIPTOR_TERMINATE_LIST),
  &gPeiSStateBootModePpiGuid,
  NULL
};


/**
  Determine if we're in capsule update boot mode.
  It's done by calling Capsule PPI.
  
  @param  PeiServices General purpose services available to every PEIM.   
  
  @retval TRUE  If it's Capsule boot path.
  
  @retval FALSE If it's not Capsule boot path.
**/
STATIC
BOOLEAN
CheckUpdateCapsule(
  IN  EFI_PEI_SERVICES                **PeiServices
  )
{
  EFI_STATUS                      Status;
  PEI_CAPSULE_PPI                 *Capsule;
      
  Status = PeiServicesLocatePpi (
             &gPeiCapsulePpiGuid,
             0,
             NULL,
             (VOID **) &Capsule
             );
  if (!EFI_ERROR(Status)) {
    Status = Capsule->CheckCapsuleUpdate (PeiServices);
    if (!EFI_ERROR(Status)) {
      return TRUE;
    }
  }
  
  return FALSE;
}


/**
  If the box was opened, it's boot with full config.
  If the box is closed, then
    1. If it's first time to boot, it's boot with full config .
    2. If the ChassisIntrution is selected, force to be a boot with full config
    3. Otherwise it's boot with no change.
  
  @param  PeiServices General purpose services available to every PEIM.   
  
  @retval TRUE  If it's boot with no change.
  
  @retval FALSE If boot with no change.
**/
STATIC
BOOLEAN 
IsBootWithNoChange (
  IN EFI_PEI_SERVICES   **PeiServices
  )
{
  BOOLEAN IsFirstBoot = FALSE;
  IsFirstBoot = PcdGetBool(PcdBootState);

  if (IchCheckIntruderAndClearState()) {
    //
    // Since it was OPEN, it's not "no config. change boot"
    //
    return FALSE;
  } else {    
    //
    // Since it was CLOSED, return that can be "no config. change boot"
    // Need variable to know that memory was tested AT LEAST one time!
    //
    DEBUG ((EFI_D_INFO, "PcdChassisIntrusion = %x\n", PcdGet8(PcdChassisIntrusion)));
    DEBUG ((EFI_D_INFO, "IsFirstBoot = %x\n", IsFirstBoot));

    if (!IsFirstBoot && (PcdGet8(PcdChassisIntrusion) != 1)) {
      return TRUE;
    } else {
      return FALSE;
    }
  }
}



/**
  Peform the boot mode determination logic
  If the box is closed, then
    1. If it's first time to boot, it's boot with full config .
    2. If the ChassisIntrution is selected, force to be a boot with full config
    3. Otherwise it's boot with no change.
  
  @param  PeiServices General purpose services available to every PEIM.   
  
  @param  BootMode The detected boot mode.
  
  @retval EFI_SUCCESS if the boot mode could be set
**/
EFI_STATUS
UpdateBootMode (
  IN  EFI_PEI_SERVICES     **PeiServices,
  OUT EFI_BOOT_MODE        *BootMode  
  )
{
  EFI_STATUS          Status;
  EFI_BOOT_MODE       NewBootMode;

  if (IchCheckRecoveryJumper()) {
    DEBUG ((EFI_D_INFO, "Boot mode on recovery\n"));
    NewBootMode = BOOT_IN_RECOVERY_MODE;
    Status = PeiServicesInstallPpi (&mPpiListRecoveryBootMode);
    ASSERT_EFI_ERROR (Status);
  } else if (IchCheckS3AndClearState ()) {
    if (CheckUpdateCapsule (PeiServices)) {
      DEBUG ((EFI_D_INFO, "Boot mode on flash update\n"));
      NewBootMode = BOOT_ON_FLASH_UPDATE;
    } else {
      DEBUG ((EFI_D_INFO, "Boot mode on S3 resume\n"));
      NewBootMode = BOOT_ON_S3_RESUME;
      Status = PeiServicesInstallPpi (&mPpiListSStateBootMode);
      ASSERT_EFI_ERROR (Status);
    } 
  } else {
    //
    // Check if this is a power on reset
    //
    if (IchCheckPowerOnResetAndClearState ()) {
      DEBUG ((EFI_D_INFO, "Power On Reset\n"));
      PcdSetBool (PcdIsPowerOnReset, TRUE);
    }
    if (IsBootWithNoChange (PeiServices)) {
      DEBUG ((EFI_D_INFO, "Boot with Minimum configuration\n"));
      NewBootMode = BOOT_ASSUMING_NO_CONFIGURATION_CHANGES;
    } else {
      DEBUG ((EFI_D_INFO, "Boot with Full configuration\n"));
      NewBootMode = BOOT_WITH_FULL_CONFIGURATION;
    }
  }
  *BootMode = NewBootMode;
  Status = PeiServicesSetBootMode (NewBootMode);
  ASSERT_EFI_ERROR (Status);

  return EFI_SUCCESS;  
}
